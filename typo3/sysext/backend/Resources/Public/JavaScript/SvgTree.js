/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */
var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,s,i){void 0===i&&(i=s),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[s]}})}:function(e,t,s,i){void 0===i&&(i=s),e[i]=t[s]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__decorate=this&&this.__decorate||function(e,t,s,i){var o,n=arguments.length,r=n<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,s):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,s,i);else for(var d=e.length-1;d>=0;d--)(o=e[d])&&(r=(n<3?o(r):n>3?o(t,s,r):o(t,s))||r);return n>3&&r&&Object.defineProperty(t,s,r),r},__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&__createBinding(t,e,s);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};define(["require","exports","lit-element","lit-html/directives/unsafe-svg","d3-selection","TYPO3/CMS/Core/Ajax/AjaxRequest","./Notification","./Enum/KeyTypes","./Icons","./Tooltip","./Enum/IconTypes","lit-html/directives/if-defined"],(function(e,t,s,i,o,n,r,d,a,h,l,c){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SvgTree=void 0,o=__importStar(o),n=__importDefault(n);class u extends s.LitElement{constructor(){super(...arguments),this.setup=null,this.settings={showIcons:!1,marginTop:15,nodeHeight:20,indentWidth:16,width:300,duration:400,dataUrl:"",filterUrl:"",defaultProperties:{},expandUpToLevel:null},this.pathAboveMounts=0,this.isOverSvg=!1,this.hoveredNode=null,this.focusedNode=null,this.svg=null,this.container=null,this.nodesContainer=null,this.nodesBgContainer=null,this.nodes=[],this.textPosition=10,this.icons={},this.data=new class{constructor(){this.links=[],this.nodes=[]}},this.viewportHeight=0,this.scrollBottom=0,this.searchTerm=null,this.unfilteredNodes="",this.networkErrorTitle=TYPO3.lang.pagetree_networkErrorTitle,this.networkErrorMessage=TYPO3.lang.pagetree_networkErrorDesc}doSetup(e){Object.assign(this.settings,e),this.settings.showIcons&&(this.textPosition+=20),this.svg=o.select(this).select("svg"),this.container=this.svg.select(".nodes-wrapper"),this.nodesBgContainer=this.container.select(".nodes-bg"),this.nodesContainer=this.container.select(".nodes"),this.updateScrollPosition(),this.loadData(),this.dispatchEvent(new Event("svg-tree:initialized"))}switchFocus(e){if(null===e)return;e.parentNode.querySelectorAll("[tabindex]").forEach(e=>{e.setAttribute("tabindex","-1")}),e.setAttribute("tabindex","0"),e.focus()}switchFocusNode(e){this.focusedNode=e,this.switchFocus(this.getNodeElement(e))}getNodeElement(e){return this.querySelector("#identifier-"+this.getNodeStateIdentifier(e))}loadData(){this.nodesAddPlaceholder(),new n.default(this.settings.dataUrl).get({cache:"no-cache"}).then(e=>e.resolve()).then(e=>{const t=Array.isArray(e)?e:[];this.replaceData(t),this.nodesRemovePlaceholder(),this.updateScrollPosition(),this.requestUpdate()}).catch(e=>{throw this.errorNotification(e,!1),this.nodesRemovePlaceholder(),e})}replaceData(e){this.setParametersNode(e),this.prepareDataForVisibleNodes(),this.requestUpdate()}setParametersNode(e=null){1===(e=(e=e||this.nodes).map((t,s)=>{if(void 0===t.command&&(t=Object.assign({},this.settings.defaultProperties,t)),t.expanded=null!==this.settings.expandUpToLevel?t.depth<this.settings.expandUpToLevel:Boolean(t.expanded),t.parents=[],t.parentsStateIdentifier=[],t.depth>0){let i=t.depth;for(let o=s;o>=0;o--){let s=e[o];s.depth<i&&(t.parents.push(o),t.parentsStateIdentifier.push(e[o].stateIdentifier),i=s.depth)}}return void 0===t.checked&&(t.checked=!1),t})).filter(e=>0===e.depth).length&&(e[0].expanded=!0);const t=new CustomEvent("typo3:svg-tree:nodes-prepared",{detail:{nodes:e},bubbles:!1});this.dispatchEvent(t),this.nodes=t.detail.nodes}nodesRemovePlaceholder(){const e=this.querySelector(".node-loader");e&&(e.style.display="none");const t=this.closest(".svg-tree"),s=null==t?void 0:t.querySelector(".svg-tree-loader");s&&(s.style.display="none")}nodesAddPlaceholder(e=null){if(e){const t=this.querySelector(".node-loader");t&&(t.style.top=""+(e.y+this.settings.marginTop),t.style.display="block")}else{const e=this.closest(".svg-tree"),t=null==e?void 0:e.querySelector(".svg-tree-loader");t&&(t.style.display="block")}}hideChildren(e){e.expanded=!1,this.setExpandedState(e),this.dispatchEvent(new CustomEvent("typo3:svg-tree:expand-toggle",{detail:{node:e}}))}showChildren(e){e.expanded=!0,this.setExpandedState(e),this.dispatchEvent(new CustomEvent("typo3:svg-tree:expand-toggle",{detail:{node:e}}))}setExpandedState(e){const t=this.getNodeElement(e);t&&(e.hasChildren?t.setAttribute("aria-expanded",e.expanded?"true":"false"):t.removeAttribute("aria-expanded"))}refreshTree(){this.loadData()}refreshOrFilterTree(){""!==this.searchTerm?this.filter(this.searchTerm):this.refreshTree()}prepareDataForVisibleNodes(){const e={};this.nodes.forEach((t,s)=>{t.expanded||(e[s]=!0)}),this.data.nodes=this.nodes.filter(t=>!0!==t.hidden&&!t.parents.some(t=>Boolean(e[t]))),this.data.links=[],this.pathAboveMounts=0,this.data.nodes.forEach((e,t)=>{e.x=e.depth*this.settings.indentWidth,e.readableRootline&&(this.pathAboveMounts+=this.settings.nodeHeight),e.y=t*this.settings.nodeHeight+this.pathAboveMounts,void 0!==e.parents[0]&&this.data.links.push({source:this.nodes[e.parents[0]],target:e}),this.settings.showIcons&&(this.fetchIcon(e.icon),this.fetchIcon(e.overlayIcon),e.locked&&this.fetchIcon("warning-in-use"))})}fetchIcon(e,t=!0){e&&(e in this.icons||(this.icons[e]={identifier:e,icon:""},a.getIcon(e,a.sizes.small,null,null,l.MarkupIdentifiers.inline).then(s=>{let i=s.match(/<svg[\s\S]*<\/svg>/i);i&&(this.icons[e].icon=i[0]),t&&this.updateVisibleNodes()})))}renderVisibleNodes(){const e=Math.ceil(this.viewportHeight/this.settings.nodeHeight+1),t=Math.floor(Math.max(this.scrollTop-2*this.settings.nodeHeight,0)/this.settings.nodeHeight),i=this.data.nodes.slice(t,t+e),o=(this.querySelector('[tabindex="0"]'),i.find(e=>e.checked)),n=(e,t)=>void 0!==o?o===e?"0":-1:this.focusedNode?this.focusedNode===e?0:"-1":0===t?"0":"-1";return i.map((e,t)=>s.svg`
      <g class=${this.getNodeClass(e)}
         id="identifier-${e.stateIdentifier}"
         role="treeitem"
         aria-owns=${c.ifDefined(e.hasChildren?"group-identifier-"+e.stateIdentifier:void 0)}
         aria-level=${this.getNodeDepth(e)}
         aria-setsize=${c.ifDefined(this.getNodeSetsize(e))}
         aria-posinset=${c.ifDefined(this.getNodePositionInSet(e))}
         aria-expanded=${c.ifDefined(e.hasChildren?e.expanded:void 0)}
         transform=${this.getNodeTransform(e)}
         data-state-id=${this.getNodeStateIdentifier(e)}
         title=${this.getNodeTitle(e)}
         data-depth=${e.depth}
         tabindex="${n(e,t)}"
         @mouseover=${t=>this.onMouseOverNode(e)}
         @mouseout=${t=>this.onMouseOutOfNode(e)}
         @contextmenu=${t=>{t.preventDefault(),this.dispatchEvent(new CustomEvent("typo3:svg-tree:node-context",{detail:{node:e}}))}}
         >${this.renderNode(e)}</g>
    `)}renderVisibleNodesBgs(){const e=Math.ceil(this.viewportHeight/this.settings.nodeHeight+1),t=Math.floor(Math.max(this.scrollTop-2*this.settings.nodeHeight,0)/this.settings.nodeHeight),i=this.data.nodes.slice(t,t+e);this.querySelector('[tabindex="0"]'),i.find(e=>e.checked);return i.map((e,t)=>s.svg`
      <rect width="100%"
            height=${this.settings.nodeHeight}
            rx="${e.isOver?3:0}"
            ry="${e.isOver?3:0}"
            data-state-id=${this.getNodeStateIdentifier(e)}
            class=${this.getNodeBgClass(e,t,i)}
            style=${e.backgroundColor?"fill: "+e.backgroundColor+";":""}
            transform=${this.getNodeBgTransform(e)}
            @mouseover=${t=>this.onMouseOverNode(e)}
            @mouseout=${t=>this.onMouseOutOfNode(e)}
            @click=${t=>{t.preventDefault(),this.selectNode(e),this.switchFocusNode(e)}}
            @contextmenu=${t=>{t.preventDefault(),this.dispatchEvent(new CustomEvent("typo3:svg-tree:node-context",{detail:{node:e}}))}}></rect>
    `)}updateVisibleNodes(){this.requestUpdate()}updateNodeBgClass(e){return e.enter()}getIconId(e){return"#icon-"+e.icon}getIconOverlayId(e){return"#icon-"+e.overlayIcon}selectNode(e){this.isNodeSelectable(e)&&(this.disableSelectedNodes(),e.checked=!0,this.dispatchEvent(new CustomEvent("typo3:svg-tree:node-selected",{detail:{node:e}})),this.updateVisibleNodes())}filter(e){"string"==typeof e&&(this.searchTerm=e),this.nodesAddPlaceholder(),this.searchTerm&&this.settings.filterUrl?new n.default(this.settings.filterUrl+"&q="+this.searchTerm).get({cache:"no-cache"}).then(e=>e.resolve()).then(e=>{let t=Array.isArray(e)?e:[];t.length>0&&(""===this.unfilteredNodes&&(this.unfilteredNodes=JSON.stringify(this.nodes)),this.replaceData(t)),this.nodesRemovePlaceholder()}).catch(e=>{throw this.errorNotification(e,!1),this.nodesRemovePlaceholder(),e}):this.resetFilter()}resetFilter(){if(this.searchTerm="",this.unfilteredNodes.length>0){let e=this.getSelectedNodes()[0];if(void 0===e)return void this.refreshTree();this.nodes=JSON.parse(this.unfilteredNodes),this.unfilteredNodes="";const t=this.getNodeByIdentifier(e.stateIdentifier);t?this.selectNode(t):this.refreshTree()}else this.refreshTree();this.prepareDataForVisibleNodes(),this.updateVisibleNodes()}errorNotification(e=null,t=!1){if(Array.isArray(e))e.forEach(e=>{r.error(e.title,e.message)});else{let t=this.networkErrorTitle;e&&e.target&&(e.target.status||e.target.statusText)&&(t+=" - "+(e.target.status||"")+" "+(e.target.statusText||"")),r.error(t,this.networkErrorMessage)}t&&this.loadData()}connectedCallback(){super.connectedCallback(),this.addEventListener("resize",()=>this.updateView()),this.addEventListener("scroll",()=>this.updateView()),this.addEventListener("svg-tree:visible",()=>this.updateView()),window.addEventListener("resize",()=>{this.getClientRects().length>0&&this.updateView()})}getSelectedNodes(){return this.nodes.filter(e=>e.checked)}createRenderRoot(){return this}render(){const e=Object.values(this.icons).filter(e=>""!==e.icon);return s.html`
      <div class="node-loader">
        <typo3-backend-icon identifier="spinner-circle-light" size="small"></typo3-backend-icon>
      </div>
      <svg version="1.1"
           width="100%"
           height="${this.data.nodes.length*this.settings.nodeHeight+this.settings.nodeHeight/2+this.pathAboveMounts}"
           @mouseover=${()=>this.isOverSvg=!0}
           @mouseout=${()=>this.isOverSvg=!1}
           @keydown=${e=>this.handleKeyboardInteraction(e)}>
        <g class="nodes-wrapper"
           transform="translate(${this.settings.indentWidth/2},${this.settings.nodeHeight/2})">
          <g class="nodes-bg">
            ${this.renderVisibleNodesBgs()}
          </g>
          <g class="links">
            ${this.renderVisibleLinks()}
          </g>
          <g class="nodes" role="tree">
            ${this.renderVisibleNodes()}
          </g>
        </g>
        <defs>
          ${e.map(e=>s.svg`
            <g class="icon-def" id="icon-${e.identifier}">
              ${i.unsafeSVG(e.icon.replace("<svg","<g").replace("/svg>","/g>"))}
            </g>`)}
        </defs>
      </svg>
    `}firstUpdated(){this.svg=o.select(this.querySelector("svg")),this.container=o.select(this.querySelector(".nodes-wrapper")),this.nodesBgContainer=o.select(this.querySelector(".nodes-bg")),this.nodesContainer=o.select(this.querySelector(".nodes")),this.doSetup(this.setup||{})}renderNode(e){return s.svg`
      <text class="node-rootline" dx="0" dy="-15" visibility=${e.readableRootline?"visible":"hidden"}
        >${e.readableRootline}</text>

      <g class="toggle" visibility=${this.getToggleVisibility(e)} transform="translate(-8, -8)" @click=${t=>this.chevronClick(e)}">
        <path d="M 0 0 L 16 0 L 16 16 L 0 16 Z" style="opacity: 0;"></path>
        <path d="M 4 3 L 13 8 L 4 13 Z" class=${this.getChevronClass(e)} transform=${this.getChevronTransform(e)} style="fill: ${this.getChevronColor(e)};"></path>
      </g>

      <text dx=${this.getTextElementPosition(e)} dy="5" class="node-name" @click=${this.getTextElementOnClickHandler(e)}
        >${this.getNodeLabel(e)}</text>

      ${!1===this.settings.showIcons?"":s.svg`
        <g class="node-icon-container" title=${this.getNodeTitle(e)} data-bs-toggle="tooltip" @click=${t=>this.clickOnIcon(e)}>
          <use class="node-icon" data-uid=${this.getNodeIdentifier(e)} transform="translate(8, -8)" href="${this.getIconId(e)}"/>
          <use class="node-icon-overlay" transform="translate(8, -3)" href="${this.getIconOverlayId(e)}"/>
          ${e.locked?s.svg`<use class="node-icon-locked" x="27" y="-7" href="#icon-warning-in-use"/>`:""}
        </g>
      `}
    `}getTextElementPosition(e){return(this.settings.showIcons?30:10)+(e.locked?15:0)}getTextElementOnClickHandler(e){return t=>{this.selectNode(e)}}updateView(){this.updateScrollPosition(),this.updateVisibleNodes()}disableSelectedNodes(){this.getSelectedNodes().forEach(e=>{!0===e.checked&&(e.checked=!1)})}isNodeSelectable(e){return!0}nodesUpdate(e){return e}getNodeIdentifier(e){return e.identifier}getNodeDepth(e){return e.depth}getNodeSetsize(e){return e.siblingsCount}getNodePositionInSet(e){return e.siblingsPosition}getNodeStateIdentifier(e){return e.stateIdentifier}getNodeLabel(e){return(e.prefix||"")+e.name+(e.suffix||"")}getNodeClass(e){return"node identifier-"+e.stateIdentifier}getNodeByIdentifier(e){return this.nodes.find(t=>t.stateIdentifier===e)}getNodeBgClass(e,t,s){let i="node-bg",o=null,n=null;return null!==s&&(o=s[t-1],n=s[t+1]),e.checked&&(i+=" node-selected"),(o&&e.depth>o.depth||!o)&&(e.firstChild=!0,i+=" node-first-child"),(n&&e.depth>n.depth||!n)&&(e.lastChild=!0,i+=" node-last-child"),e.class&&(i+=" "+e.class),e.isOver&&(i+=" node-over"),i}getNodeTitle(e){return e.tip?e.tip:"uid="+e.identifier}getChevronTransform(e){return e.expanded?"translate(16,0) rotate(90)":" rotate(0)"}getChevronColor(e){return e.expanded?"#000":"#8e8e8e"}getToggleVisibility(e){return e.hasChildren?"visible":"hidden"}getChevronClass(e){return"chevron "+(e.expanded?"expanded":"collapsed")}getLinkPath(e){const t=e.target.x,s=e.target.y,i=[];return i.push("M"+e.source.x+" "+e.source.y),i.push("V"+s),e.target.hasChildren?i.push("H"+(t-2)):i.push("H"+(t+this.settings.indentWidth/4-2)),i.join(" ")}getNodeTransform(e){return"translate("+(e.x||0)+","+(e.y||0)+")"}getNodeBgTransform(e){return"translate(-8, "+((e.y||0)-10)+")"}clickOnIcon(e){this.dispatchEvent(new CustomEvent("typo3:svg-tree:node-context",{detail:{node:e}}))}chevronClick(e){e.expanded?this.hideChildren(e):this.showChildren(e),this.prepareDataForVisibleNodes(),this.updateVisibleNodes()}enterSvgElements(e){const t=this.nodesUpdate(e);let s=t.append("g").attr("class","toggle").attr("visibility",this.getToggleVisibility).attr("transform","translate(-8, -8)").on("click",(e,t)=>this.chevronClick(t));if(s.append("path").style("opacity",0).attr("d","M 0 0 L 16 0 L 16 16 L 0 16 Z"),s.append("path").attr("class","chevron").attr("d","M 4 3 L 13 8 L 4 13 Z"),this.settings.showIcons){const e=t.append("g").attr("class","node-icon-container").attr("title",this.getNodeTitle).attr("data-bs-toggle","tooltip").on("click",(e,t)=>{this.clickOnIcon(t)});e.append("use").attr("class","node-icon").attr("data-uid",this.getNodeIdentifier).attr("transform","translate(8, -8)"),e.append("use").attr("transform","translate(8, -3)").attr("class","node-icon-overlay"),e.append("use").attr("x",27).attr("y",-7).attr("class","node-icon-locked")}return h.initialize('[data-bs-toggle="tooltip"]',{delay:{show:50,hide:50},trigger:"hover",placement:"right"}),e.merge(t)}updateScrollPosition(){this.viewportHeight=this.getBoundingClientRect().height,this.scrollBottom=this.scrollTop+this.viewportHeight+this.viewportHeight/2,h.hide(this.querySelectorAll("[data-bs-toggle=tooltip]"))}onMouseOverNode(e){e.isOver=!0,this.hoveredNode=e,this.requestUpdate()}onMouseOutOfNode(e){e.isOver=!1,this.hoveredNode=null,this.requestUpdate()}handleKeyboardInteraction(e){const t=e.target,s=this.data.nodes.find(e=>t.dataset.stateId===e.stateIdentifier);if(void 0===s)return;if(-1===[d.KeyTypesEnum.ENTER,d.KeyTypesEnum.SPACE,d.KeyTypesEnum.END,d.KeyTypesEnum.HOME,d.KeyTypesEnum.LEFT,d.KeyTypesEnum.UP,d.KeyTypesEnum.RIGHT,d.KeyTypesEnum.DOWN].indexOf(e.keyCode))return;e.preventDefault();const i=t.parentNode;switch(e.keyCode){case d.KeyTypesEnum.END:this.scrollTop=this.lastElementChild.getBoundingClientRect().height+this.settings.nodeHeight-this.viewportHeight,i.scrollIntoView({behavior:"smooth",block:"end"}),this.updateVisibleNodes(),this.switchFocus(i.lastElementChild);break;case d.KeyTypesEnum.HOME:this.scrollTo({top:this.nodes[0].y,behavior:"smooth"}),this.prepareDataForVisibleNodes(),this.updateVisibleNodes(),this.switchFocus(i.firstElementChild);break;case d.KeyTypesEnum.LEFT:if(s.expanded)s.hasChildren&&(this.hideChildren(s),this.prepareDataForVisibleNodes(),this.updateVisibleNodes());else if(s.parents.length>0){let e=this.nodes[s.parents[0]];this.scrollNodeIntoVisibleArea(e,"up"),this.switchFocusNode(e)}break;case d.KeyTypesEnum.UP:this.scrollNodeIntoVisibleArea(s,"up"),this.switchFocus(t.previousElementSibling);break;case d.KeyTypesEnum.RIGHT:s.expanded?(this.scrollNodeIntoVisibleArea(s,"down"),this.switchFocus(t.nextElementSibling)):s.hasChildren&&(this.showChildren(s),this.prepareDataForVisibleNodes(),this.updateVisibleNodes(),this.switchFocus(t));break;case d.KeyTypesEnum.DOWN:this.scrollNodeIntoVisibleArea(s,"down"),this.switchFocus(t.nextElementSibling);break;case d.KeyTypesEnum.ENTER:case d.KeyTypesEnum.SPACE:this.selectNode(s)}}scrollNodeIntoVisibleArea(e,t="up"){let s=this.scrollTop;if("up"===t&&s>e.y-this.settings.nodeHeight)s=e.y-this.settings.nodeHeight;else{if(!("down"===t&&s+this.viewportHeight<=e.y+3*this.settings.nodeHeight))return;s+=this.settings.nodeHeight}this.scrollTo({top:s,behavior:"smooth"}),this.updateVisibleNodes()}renderVisibleLinks(){return this.data.links.filter(e=>e.source.y<=this.scrollBottom&&e.target.y>=this.scrollTop-this.settings.nodeHeight).map(e=>(e.source.owns=e.source.owns||[],e.source.owns.push("identifier-"+e.target.stateIdentifier),e)).map(e=>s.svg`
      <path class="link"
            id=${c.ifDefined(this.getGroupIdentifier(e))}
            role=${c.ifDefined(1===e.target.siblingsPosition&&e.source.owns.length>0?"group":void 0)}
            aria-owns=${c.ifDefined(1===e.target.siblingsPosition&&e.source.owns.length>0?e.source.owns.join(" "):void 0)}
            d=${this.getLinkPath(e)}></path>
    `)}getGroupIdentifier(e){return 1===e.target.siblingsPosition?"group-identifier-"+e.source.stateIdentifier:void 0}}__decorate([s.property({type:Object})],u.prototype,"setup",void 0),__decorate([s.internalProperty()],u.prototype,"settings",void 0),__decorate([s.internalProperty()],u.prototype,"pathAboveMounts",void 0),__decorate([s.internalProperty()],u.prototype,"isOverSvg",void 0),__decorate([s.internalProperty()],u.prototype,"hoveredNode",void 0),__decorate([s.internalProperty()],u.prototype,"focusedNode",void 0),t.SvgTree=u}));